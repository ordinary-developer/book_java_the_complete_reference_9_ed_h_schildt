 ######################
 delegation event model
 ######################

 using the delegation event model
 ================================

 To use a delegation model you must

 1. Implement the appropriate interface in the listener
    so that it can receive the type of event desired.
 2. Implement code to register and unregister (if necessary)
    the listener as a recipient for the event notifications.

 
 handling mouse events
 =====================

 To handle mouse events, you must implement the "MouseListener"
 and the "MouseMotionListener" interfaces


 handling keyboard events
 ========================

 To handle keyboard events, you must implement 
 the "KeyListener" interface.
 
 When a key is pressed, a "KEY_PRESSED" event is generated.
 This results in a call to the "keyPressed()" event handler.
 When the key is released, a "KEY_RELEASED" event is generated
 and the "keyReleased()" handled is executed.
 If a character is generated by the keystroke, then a "KEY_TYPED"
 event is sent and the "keyTyped()" handler is invoked.


 adapter classes
 ===============

 An adapter class provides an empty implementation of all methods
 in an event listener interface.

 You can defined a new class to act as an event listener 
 by extending one of the adapter classes and implementing 
 only those events in which you are interested.

 The "MouseMotionAdapter" class has empty two methods:
     - mouseDragged()
     - mouseMoved()
 which are the methods defined by the "MouseMotionListener" interface


 inner classes
 =============

 An inner class is a class defined within another class, 
 or even within an expression.


 anonymous class
 ===============

 An anonymous inner class is one that is not assigned a name.
