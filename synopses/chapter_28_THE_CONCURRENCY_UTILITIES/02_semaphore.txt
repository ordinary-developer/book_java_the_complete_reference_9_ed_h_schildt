 #########
 Semaphore
 #########

 Semaphore
 =========

 A semaphore controls access to a shared resource through the use 
 of a counter. If the counter is greater than zero, then access
 is allowed. If it is zero, then access is denied.

 In general, to use a semaphore, the thread that wants access 
 to the shared resource tries to acquire a permit. 
 If the semaphore's count is greater than zero, then the thread
 acquires a permit, which causes the semaphore's count 
 to be decremented. Otherwise, the thread will be blocked
 until a permit can be acquired.
 When the thread no longer needs access to the shared resource,
 it releases the permit, which causes the semaphore's count
 to be incremented. If there is another thread waiting for a permit,
 then that thread will acquire a permit at that time.


 constructors
 ============

 "Semaphore" has two constructors
   ------------------------------------
 - | Semaphore(int num)               |
   ------------------------------------
   ------------------------------------
 - | Semaphore(int num, boolean how)  |
   ------------------------------------
   Here, "num" specifies the initial permit count. 
   Thus, "num" specifies the number of threads that can access
   a shared resource at any time.
   By default, waiting threads are granted a permit in an 
   undefined order.
   By setting "how" to true, you can ensure that waiting threads
   are granted a permit in the order in which they requested access.


 auxiliary data
 ==============

 To acquire a permit, call the "acquire()" method
   --------------------------------------------------------
 - | void acquire() throws IntertupedException            |
   --------------------------------------------------------
   --------------------------------------------------------
 - | void acquire(int num) throws InterruptedException    |
   --------------------------------------------------------
   The first form aqcuires one permit.
   The second form acquires "num" permits.
   If the permit cannot be granted at the time of the call,
   then the invoking thread suspends until the permit is available.

 To release a permit, call "release()"
   --------------------------------------------------------
 - | void release()                                       |
   --------------------------------------------------------
   --------------------------------------------------------
 - | void release(int num)                                |
   --------------------------------------------------------
   The first form releases one permit. 
   The second form releases the number of permits specified by "num".

 To use a semaphore to control access to a resource, each thread 
 that wants to use that resource must first call "acquire()"
 before accessing the resource.
 When the thread is done with the resource, it must call "release()".
