 ######################
 The collection classes
 ######################

 The ArrayList Class
 ===================

 The "ArrayList" class extends "AbstractList" and implements "List" inteface.
 "ArrayList" is a generic class that has this declaration:
    class ArrayList<E>
 "ArrayList" supports dynamic arrays that can grow as needed.

 "ArrayList" has the constructors shown here:
 - ArrayList()
 - ArrayList(Collection<? extends E> c)
 - ArrayList(int capacity)

 ArrayList's methods

 - void ensureCapacity(int cap)
        increases the capacity of the arraylist 
 
 - void trimToSize()
        reduces the size of the array that underlies an "ArrayList" object
        so that it is precisely as large as the number of items that it is
        currently holding.

 - object[] toArray()               | -> covert an "ArrayList" to an array
 - <T> T[] toArray(T array[])       |

 the linekedlist class
 =====================

 The "LinkedList" class extends "AbstractSequentialList" and implements 
 the "List", "Deque", and "Queue" interfaces. It provides a linked-list 
 data structure.
 "LinkedList" is a generic class that has this declaration
    class LinkedList<E>

 "LinkedList" has the two constructors shown here:
    - LinkedList()
    - LinkedList(Collection<? extends E> c)

 methods (from "Deque" interface)

 - addFirst()   |
                |-> add elements to the start of a list
 - offerFirst() |


 - addLast()   |
               |-> add elements to the end of the list
 - offerLast() |


 - getFirst()  |
               |-> obtain the first element
 - peekFirst() |


 - removeFirst() |
                 |-> remove the first element
 - pollFirst()   |

 
 - removeLast()  |
                 |-> remove the last element
 - pollLast()    |
    

 
 the hashset class
 =================

 "HashSet" extends "AbstractSet" and implements the "Set" interface. 
 It creates a collection that uses a hash table for storage. 
 "HashSet" is a generic class that has this declaration:
    class HashSet<E>
 Here, E specifies the type of objects that the set will hold.

 A hash table stores information by using a mechanism called hashing.
 In hashing, the informational content of a key is used to determine
 a unique value, called its hash code. The hash code is then used as
 the inde at which the data associated with the key is stored.

 The advantage of hashing is that it allows the execution time of
 "add()", "contains()", "remove()" and "size()" to remain constant
 even for large sets.

 The following constructors are defined
 
 - HashSet()
 - HashSet(Collection<? extends E> c)
 - HashSet(int capacity)
 - HashSet(int capacity, float fillRatio)

 "HashSet" does not guarantee the order of its elements.
 If you need sorted storage, then another collection, such as "TreeSet"
 can be used.


 the LinkedHashSet class
 =======================

 The LinkedHashSet class extends HashSet and adds no members of its own. It is a generic 
 class that has this declaration:
    class LinkedHashSet<E>
 Here, E specifies the type of objects that the set will hold. 

 Its constructors parallel those in HashSet.

 LinkedHashSet maintains a linked list of the entries in the set, in the order in which
 they were inserted. This allows insertion-order iteration over the set. That is, when cycling
 through a LinkedHashSet using an iterator, the elements will be returned in the order in
 which they were inserted. This is also the order in which they are contained in the string
 returned by toString( ) when called on a LinkedHashSet object.

 
 the TreeSet class
 =================

 "TreeSet" extends "AbstractSet" and implements the "NavigableSet" interface. 
 It clreates a collection that uses a tree for storage. 
 Objects are stored in sorted, ascending order. 
 Access and retrieval times are quite fast, which makes "TreeSet" 
 an excellent choice when storing large amounts of sorted information 
 that must be found quickly.

 "TreeSet" is a generic class that has this declaration:
    class TreeSet<E>
 Here, E specifies the type of objects that the set will hold.

 "TreeSet" has the following constructors:

 - TreeSet()
 - TreeSet(Collection<? extends E> c)
 - TreeSet(Comparator<? super E> comp)
 - TreeSet(SortedSet<E> ss)


 the PriorityQueue class
 =======================

 PriorityQueue extends AbstractQueue and implements the Queue interface. It creates a
 queue that is prioritized based on the queue’s comparator. PriorityQueue is a generic class
 that has this declaration:
    class PriorityQueue<E>
 Here, E specifies the type of objects stored in the queue. PriorityQueues are dynamic,
 growing as necessary.

 PriorityQueue defines the six constructors shown here:

 - PriorityQueue( )
 - PriorityQueue(int capacity)
 - PriorityQueue(Comparator<? super E> comp) (Added by JDK 8.)
 - PriorityQueue(int capacity, Comparator<? super E> comp)
 - PriorityQueue(Collection<? extends E> c)
 - PriorityQueue(PriorityQueue<? extends E> c)
 - PriorityQueue(SortedSet<? extends E> c) 

 If no comparator is specified when a PriorityQueue is constructed, then the default
 comparator for the type of data stored in the queue is used.

 You can obtain a reference to the comparator used by a PriorityQueue by calling its
 comparator( ) method, shown here:
    Comparator<? super E> comparator( )
 It returns the comparator. If natural ordering is used for the invoking queue, null is
 returned.

 Although you can iterate through a PriorityQueue using an
 iterator, the order of that iteration is undefined. To properly use a PriorityQueue, you
 must call methods such as offer( ) and poll( ), which are defined by the Queue interface.


 the ArrayDeque class
 ====================

 The "ArrayDeque" class extends "AbstractCollection" and implements the "Deque" interface.
 It adds no methods of its own. "ArrayDeque" creates a dynamic array and has no capacity
 restrictions. (The "Deque" interface supports implementations that restrict capacity,
 but does not require such restrictions.) 

 "ArrayDeque" is a generic class that has this declaration:
    class ArrayDeque<E>
 Here, E specifies the type of objects stored in the collection.

 "ArrayDeque" defines the following constructors:

 - ArrayDeque()
 - ArrayDeque(int size)
 - ArrayDeque(Collection<? extends E> c)


 the EnumSet class
 =================

 EnumSet extends AbstractSet and implements Set. It is specifically for use with elements of
 an enum type. It is a generic class that has this declaration:
    class EnumSet<E extends Enum<E>>
 Here, E specifies the elements. Notice that E must extend Enum<E>, which enforces the
 requirement that the elements must be of the specified enum type.

 EnumSet defines no constructors. Instead, it uses the factory methods shown in Table 18-7
 to create objects. All methods can throw NullPointerException. The copyOf( ) and range( )
 methods can also throw IllegalArgumentException. Notice that the of( ) method is overloaded
 a number of times. This is in the interest of efficiency. Passing a known number of arguments
 can be faster than using a vararg parameter when the number of arguments is small.