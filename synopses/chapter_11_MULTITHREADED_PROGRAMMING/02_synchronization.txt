 ###############
 synchronization
 ###############

 synchronization
 ===============

 Key to synchronization it the concept of the monitor. 
 A monitor is an object that is used as a mutually exclusive lock.
 Only one thread can own a monitor at a given time. When a thread
 acquires a lock, it is said to have entered the monitor.
 All other threads attempting to enter the locked monitor 
 will be suspended until the first thread exits the monitor.
 These other threads are said to be waiting for the monitor.
 A thread that owns a monitor can reenter the same monitor
 if it so desires.

 All objects have their own implicit monitor associated with them.
 To enter an object's monitor, just call a method that has been
 defined with the "synchronized" keyword. While a thread is inside
 a synchronized method, all other threads that try to call it
 (or any other synchronized method) on the same instance have to wait.
 To exit the monitor and relinquish control of the object to the next
 waiting thread, the owner of the monitor simply returns from the
 synchronized method.
 
 remember: one monitor can be owned only by one thread, 
 but two monitors can be owned by two different thread (
 consequently class instances).

 You also can put call to the methods defined by class insed
 a synchronized block
  --------------------------------------------------------------------
 | synchronized(objRef) {					    |
 |     // statements to be synchronized				    |
 | }								    |
 --------------------------------------------------------------------
 Here, objRef is a reference to the object being synchronized. 
 A synchronized block ensures that a call to a synchronized method
 that is a member of objRef's class occurs only after the current
 thread has successfully entered objRef's monitor