 accessing a collection via an Iterator
 ######################################

 accessing a collection via an Iterator
 ======================================

 To cycle through the elements in a collection, 
 you can use an iterator, which is an object that implements
 either the "Iterator" or the "ListIterator" interface.
 
 "Iterator" enables you to cycle through a collection, 
 obtaining or removing elements. 
 
 "ListIterator" extends "Iterator" to allow bidirectional 
 traversal of a list, and the modification of elements.

 
 Using an Iterator
 =================

 1. Obtain an iterator to the start of the collection by calling
    the collection's "iterator()" method
 2. Set up a loop that make a call to hasNext(). 
    Have the loop iterate as long as "hasNext()" returns true.
 3. Within the loop, obtain each element by calling "next()"

 For collections that implement "List", you can also obtain an 
 iterator by calling "listIterator()". As explained, a list
 iterator gives you the ability to access the collection in
 either the forward or backward direction and lets you modify
 an element.

 
 for-each cycle
 ==============

 If you won't be modifying the contents of a collection 
 or obtaining elements in reverse order, you can use
 the for-each cycle.

 "For" can cycle through any collection of objects 
 that implemet the "Iterable" interface.
 (all of the collection classes implement this interface)

 
 Spliterators
 ============

 "Spliterator" (a new type of iterator that is defined by the 
 "Spliterator" interface) suppors parallel programming.

 Using "Spliterator" is the following:
 simply call "tryAdvance()" until it returns "false".
 If you will be applying the same action to each element in the sequence,
 "forEachRemaining()" offers a streamlined alternative. In both cases,
 the action that will occur with each iteration is defined by what 
 the "Consumer" object does with each element.
 
 "Consumer" is a functional interface that applies an action to an object.
 "Consumer" specifies only one abstract method, "accept()", which is shown
 here:
    void accept(T objRef)
 In the case of "tryAdvance()", each iteration passes the next element
 in the sequence to objRef.

 Often, the easiest way to implement "Consumer" is by use of
 a lambda expression.